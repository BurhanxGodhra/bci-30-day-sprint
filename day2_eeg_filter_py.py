# -*- coding: utf-8 -*-
"""day2_eeg_filter.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10h6dM2XSVc2sA1mVBnNAaUb6v2qYcKKh
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Parameters
fs = 1000  # Sampling freq (Hz)
t = np.arange(0, 2, 1/fs)  # 2 seconds

# Simulate EEG with brain signals + noise
theta = 0.4 * np.sin(2 * np.pi * 5 * t)    # 5 Hz
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)   # 10 Hz
beta = 0.3 * np.sin(2 * np.pi * 20 * t)    # 20 Hz
power_noise = 0.5 * np.sin(2 * np.pi * 60 * t)  # 60 Hz artifact
random_noise = 0.2 * np.random.normal(0, 1, len(t))  # Random noise
eeg_signal = theta + alpha + beta + power_noise + random_noise

# Design a band-pass filter (8-30 Hz for alpha + beta)
lowcut = 8.0   # Hz
highcut = 30.0 # Hz
nyquist = fs / 2
low = lowcut / nyquist
high = highcut / nyquist
b, a = signal.butter(2, [low, high], btype='band')  # 2nd-order Butterworth

# Apply filter
filtered_signal = signal.filtfilt(b, a, eeg_signal)

# Plot raw vs. filtered
plt.figure(figsize=(12, 8))
plt.subplot(3, 1, 1)
plt.plot(t, eeg_signal, label="Raw EEG")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Raw EEG with Noise")
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(t, filtered_signal, label="Filtered EEG (8-30 Hz)", color='green')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Filtered EEG")
plt.legend()

# PSD comparison
freqs_raw, psd_raw = signal.welch(eeg_signal, fs, nperseg=256)
freqs_filt, psd_filt = signal.welch(filtered_signal, fs, nperseg=256)
plt.subplot(3, 1, 3)
plt.semilogy(freqs_raw, psd_raw, label="Raw PSD")
plt.semilogy(freqs_filt, psd_filt, label="Filtered PSD", color='green')
plt.xlabel("Frequency (Hz)")
plt.ylabel("Power")
plt.title("Power Spectral Density")
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

fs = 1000
t = np.arange(0, 2, 1/fs)

theta = 0.4 * np.sin(2 * np.pi * 5 * t)
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)
beta = 0.3 * np.sin(2 * np.pi * 20 * t)
power_noise = 0.5 * np.sin(2 * np.pi * 60 * t)
random_noise = 0.2 * np.random.normal(0, 1, len(t))

eeg_signal = theta + alpha + beta + power_noise + random_noise
# eeg_signal = theta + alpha + beta + random_noise

eeg_signal[800:850] += 2.0

# Band-pass 8-30 Hz keeps alpha/beta for motor imagery or attention tasks

lowcut = 8.0
highcut = 30.0
nyquist = fs/ 2
low = lowcut / nyquist
high = highcut / nyquist
cutoff = 1.0
b_1, a_1 = signal.butter(2, [58/nyquist, 62/nyquist], btype='bandstop')
b_2, a_2 = signal.butter(2, [cutoff/nyquist], btype='high')
b_3, a_3 = signal.butter(2, [low, high], btype='band')

filtered_signal_1 = signal.filtfilt(b_1, a_1, eeg_signal)
filtered_signal_2 = signal.filtfilt(b_2, a_2, filtered_signal_1)
filtered_signal = signal.filtfilt(b_3, a_3, filtered_signal_2)


plt.figure(figsize=(12, 8))
plt.subplot(3, 1, 1)
plt.plot(t, eeg_signal, label="Raw EEG")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Raw EEG with Noise")
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(t, filtered_signal, label="Filtered EEG", color='red')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Filtered EEG")
plt.legend()

freqs_raw, psd_raw = signal.welch(eeg_signal, fs, nperseg=256)
freqs_filt, psd_filt = signal.welch(filtered_signal, fs, nperseg=256)
plt.subplot(3, 1, 3)
plt.semilogy(freqs_raw, psd_raw, label="Raw PSD")
plt.semilogy(freqs_filt, psd_filt, label="Filtered PSD", color='red')
plt.xlabel("Frequency (Hz)")
plt.ylabel("Power")
plt.title("Power Spectral Density")
plt.legend()
plt.tight_layout()
plt.show()

