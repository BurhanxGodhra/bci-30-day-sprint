# -*- coding: utf-8 -*-
"""day8_2class_psd_svm.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i3In1wsz3GwT8nmG_-jvbYiAN7PEKEJ8
"""

!pip install mne PyWavelets

import mne
import numpy as np
from scipy import signal
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

raw = mne.io.read_raw_gdf('/content/A01T.gdf', preload=True)
events, event_dict = mne.events_from_annotations(raw)

raw.notch_filter(50, picks='eeg')
raw.filter(8, 30, fir_design='firwin', picks='eeg')

sfreq = 250
tmin, tmax = 2.5, 4.5  # Epoch duration
n_samples = int((tmax - tmin) * sfreq)
event_ids = {'769': 0, '770': 1}

X, y = [], []
for event in events:
    event_id = event[2]
    if event_id in [event_dict[str(k)] for k in event_ids]:
        start = event[0] - int(4 * sfreq)  # Adjust for epoch start
        stop = start + n_samples
        if start >= 0 and stop <= raw.n_times:
            data, _ = raw[:, start:stop]
            X.append(data)
            y.append(event_ids[str([k for k, v in event_dict.items() if v == event_id][0])])

X = np.array(X)
y = np.array(y)

print(f"X shape: {X.shape}, y shape: {y.shape}")
print(f"Label counts: {np.unique(y, return_counts=True)}")

# PSD Calculation (Manual)
psd_features = []
for epoch in X:
    epoch_psds = []
    for channel_data in epoch:
        f, psd = signal.welch(channel_data, sfreq, nperseg=256, noverlap=128)
        mask = (f >= 8) & (f <= 30)
        epoch_psds.append(np.log10(psd[mask].mean()))  # Log PSD, avg over frequency
    psd_features.append(epoch_psds)

features = np.array(psd_features)

X_train, X_test, y_train, y_test = train_test_split(features, y, test_size=0.3, random_state=42)
clf = SVC(kernel='rbf', C=10, gamma='scale', random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(f"Test accuracy: {accuracy_score(y_test, y_pred):.2f}")

!pip install nilearn

from nilearn import datasets
data = datasets.fetch_haxby()
print(len(data.anat))

from nilearn.image import load_img
fmri_img = load_img(data.func[0])
print(fmri_img)