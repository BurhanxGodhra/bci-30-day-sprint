# -*- coding: utf-8 -*-
"""day1_eeg_sim.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nTuHq4ArrFx3ecJkgJ7xR3v6MDNTWBSF
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Parameters
fs = 1000  # Sampling freq (Hz)
t = np.arange(0, 2, 1/fs)  # 2 seconds

# Generate frequency components
theta = 0.4 * np.sin(2 * np.pi * 5 * t)    # 5 Hz
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)   # 10 Hz
beta = 0.3 * np.sin(2 * np.pi * 20 * t)    # 20 Hz
noise = 0.2 * np.random.normal(0, 1, len(t))  # Gaussian noise

# Combine into EEG signal
eeg_signal = theta + alpha + beta + noise

# Plot raw signal
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(t, eeg_signal, label="Simulated EEG")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Raw EEG Signal")
plt.legend()

# Basic frequency analysis (power spectrum)
freqs, psd = signal.welch(eeg_signal, fs, nperseg=256)
plt.subplot(2, 1, 2)
plt.semilogy(freqs, psd, label="Power Spectral Density")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Power")
plt.title("Frequency Content")
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

fs = 1000
t = np.arange(0, 2, 1/fs)

#wave = Amplitude * waves(full cycle * Hz * Time)
#V(t)= A ⋅ sin(2πft + ϕ) + noise
theta = 0.4 * np.sin(2 * np.pi * 5 * t)
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)
beta = 0.3 * np.sin(2 * np.pi * 20 * t)
gamma = 0.2 * np.sin(2 * np.pi * 40 * t)

noise = 0.2 * np.random.normal(0, 1, len(t))

eeg_signal = theta + alpha + beta + gamma + noise

plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(t, eeg_signal, label="Simulated EEG")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Raw EEG Signal")
plt.legend()

freqs, psd = signal.welch(eeg_signal, fs, nperseg=256)
plt.subplot(2, 1, 2)
plt.semilogy(freqs, psd, label="Power Spectral Density")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Power")
plt.title("Frequency Content")
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

fs = 1000
t = np.arange(0, 2, 1/fs)

#wave = Amplitude * waves(full cycle * Hz * Time)
#V(t)= A ⋅ sin(2πft + ϕ) + noise
theta = 0.4 * np.sin(2 * np.pi * 5 * t)
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)
beta = 0.3 * np.sin(2 * np.pi * 20 * t)
gamma = 0.2 * np.sin(2 * np.pi * 40 * t)

noise = 0.2 * np.random.normal(0, 1, len(t))

eeg_signal = theta + alpha + beta + gamma + noise

eeg_signal[500:550] += 2.0

plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(t, eeg_signal, label="Simulated EEG")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Raw EEG Signal")
plt.legend()

freqs, psd = signal.welch(eeg_signal, fs, nperseg=256)
plt.subplot(2, 1, 2)
plt.semilogy(freqs, psd, label="Power Spectral Density")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Power")
plt.title("Frequency Content")
plt.legend()
plt.tight_layout()
plt.show()