# -*- coding: utf-8 -*-
"""day3_feature_extraction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B2O5C6-xQx5ZtEbJCbWw9hwLo1Njumqx
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Parameters
fs = 1000
t = np.arange(0, 2, 1/fs)

# Simulate EEG (from Day 2)
theta = 0.4 * np.sin(2 * np.pi * 5 * t)
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)
beta = 0.3 * np.sin(2 * np.pi * 20 * t)
noise = 0.2 * np.random.normal(0, 1, len(t))
eeg_signal = theta + alpha + beta + noise

# Filter for alpha (8-13 Hz) and beta (13-30 Hz)
nyquist = fs / 2
b_alpha, a_alpha = signal.butter(2, [8/nyquist, 13/nyquist], btype='band')
b_beta, a_beta = signal.butter(2, [13/nyquist, 30/nyquist], btype='band')
alpha_signal = signal.filtfilt(b_alpha, a_alpha, eeg_signal)
beta_signal = signal.filtfilt(b_beta, a_beta, eeg_signal)

# Extract band power
alpha_power = np.mean(alpha_signal**2)  # Power = mean squared amplitude
beta_power = np.mean(beta_signal**2)

# PSD for comparison
freqs, psd = signal.welch(eeg_signal, fs, nperseg=256)

# Plot
plt.figure(figsize=(12, 8))
plt.subplot(3, 1, 1)
plt.plot(t, eeg_signal, label="Raw EEG")
plt.plot(t, alpha_signal, label="Alpha (8-13 Hz)", color='orange')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Raw vs. Alpha Signal")
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(t, beta_signal, label="Beta (13-30 Hz)", color='green')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Beta Signal")
plt.legend()

plt.subplot(3, 1, 3)
plt.bar(['Alpha', 'Beta'], [alpha_power, beta_power], color=['orange', 'green'])
plt.ylabel("Power (µV²)")
plt.title("Extracted Band Power")
plt.tight_layout()
plt.show()

print(f"Alpha Power: {alpha_power:.4f} µV²")
print(f"Beta Power: {beta_power:.4f} µV²")

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

fs = 1000
t = np.arange(0, 2, 1/fs)

theta = 0.4 * np.sin(2 * np.pi * 5 * t)
alpha = 0.6 * np.sin(2 * np.pi * 10 * t)
beta = 0.3 * np.sin(2 * np.pi * 20 * t)
noise = 0.2 * np.random.normal(0, 1, len(t))

eeg_signal = theta + alpha + beta + noise

nyquist = fs/2
b_alpha, a_alpha = signal.butter(2, [8/nyquist, 13/nyquist], btype='band')
b_beta, a_beta = signal.butter(2, [13/nyquist, 30/nyquist], btype='band')
b_theta, a_theta = signal.butter(2, [4/nyquist, 8/nyquist], btype='band')
alpha_signal = signal.filtfilt(b_alpha, a_alpha, eeg_signal)
beta_signal = signal.filtfilt(b_beta, a_beta, eeg_signal)
theta_signal = signal.filtfilt(b_theta, a_theta, eeg_signal)

alpha_power = np.mean(alpha**2)
beta_power = np.mean(beta**2)
theta_power = np.mean(theta**2)

freqs, PSD = signal.welch(eeg_signal, fs, nperseg=256)

plt.figure(figsize=(20, 15))
plt.subplot(5, 1, 1)
plt.plot(t, eeg_signal, label='Raw EEG')
plt.plot(t, alpha_signal, label='Alpha (8-13 Hz)', color= 'red')
plt.plot(t, beta_signal, label='Beta (13-30 Hz)', color='green')
plt.plot(t, theta_signal, label='Theta (4-8 Hz)', color='orange')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude (µV)')
plt.title("Raw vs Alpha Signal")
plt.legend()

plt.subplot(5, 1, 2)
plt.plot(t, alpha_signal, label="Alpha (8-13 Hz)", color='blue')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Alpha Signal")
plt.legend()

plt.subplot(5, 1, 3)
plt.plot(t, beta_signal, label="Beta (13-30 Hz)", color='red')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Beta Signal")
plt.legend()

plt.subplot(5, 1, 4)
plt.plot(t, theta_signal, label="Theta (4-8 Hz)", color='green')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("Theta Signal")
plt.legend()

plt.subplot(5, 1, 5)
plt.bar(['Alpha', 'Beta', 'Theta'], [alpha_power, beta_power, theta_power], color=['red', 'blue', 'orange'])
plt.ylabel("Power (µV²)")
plt.title("Extracted Band Power")
plt.tight_layout()
plt.show()

# Extracting band power for BCI motor imagery

print(f"Alpha Power: {alpha_power:.4f}µV²")
print(f"Beta Power: {beta_power:.4f}µV²")
print(f"Theta Power: {theta_power:.4f}µV²")

alpha_power_PSD = np.sum(psd[np.logical_and(freqs >= 8, freqs <= 13)])
beta_power_PSD = np.sum(psd[np.logical_and(freqs >= 13, freqs <= 30)])
theta_power_PSD = np.sum(psd[np.logical_and(freqs >= 4, freqs <= 8)])

print(f"Alpha Power: {alpha_power_PSD:.4f}µV²")
print(f"Beta Power: {beta_power_PSD:.4f}µV²")
print(f"Theta Power: {theta_power_PSD:.4f}µV²")

plt.plot(1, 1, 1)
plt.bar(['Alpha', 'Beta', 'Theta'], [alpha_power, beta_power, theta_power], color=['red', 'blue', 'orange'])
plt.ylabel("Power (µV²)")
plt.title("Extracted Band Power")
plt.tight_layout()
plt.show()

!pip install brainflow

from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds
from brainflow.data_filter import DataFilter
import numpy as np
import matplotlib.pyplot as plt

BoardShim.enable_dev_board_logger()

params = BrainFlowInputParams()
board = BoardShim(BoardIds.SYNTHETIC_BOARD.value, params)
board.prepare_session()
board.start_stream(45000)
import time
time.sleep(10)
data = board.get_board_data()
board.stop_stream()
board.release_session()

eeg_data = data[1]
fs = BoardShim.get_sampling_rate(BoardIds.SYNTHETIC_BOARD.value)

t = np.arange(len(eeg_data)) / fs
plt.plot(t, eeg_data, label="Synthetic EEG")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")
plt.title("BrainFlow Synthetic EEG")
plt.legend()
plt.show()

start_freq = 8
stop_freq = 13

DataFilter.perform_bandpass(eeg_data, fs, start_freq, stop_freq, 2, 0, 0)

alpha_power = np.mean(eeg_data**2)
print(f"Alpha Power: {alpha_power:.4f} µV²")