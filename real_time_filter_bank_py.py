# -*- coding: utf-8 -*-
"""Real-Time_filter_bank.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P2MFZa-8mwbY5vWImuLu14WXsACN4Qsa
"""

!pip install brainflow

import time
import numpy as np
from brainflow.board_shim import BoardShim, BrainFlowInputParams
from brainflow.data_filter import DataFilter, FilterTypes
from scipy.signal import welch
import matplotlib.pyplot as plt

# Setup
board_id = -1  # Synthetic—swap later
params = BrainFlowInputParams()


try:
    board = BoardShim(board_id, params)
    board.release_session()
except:
    pass


board = BoardShim(board_id, params)
board.prepare_session()
board.start_stream()


try:
    num_seconds = 10
    sampling_rate = 250
    num_samples = num_seconds * sampling_rate
    all_channel_powers = []
    start_time = time.time()
    while (time.time() - start_time) < num_seconds:
        time.sleep(1)
        data = board.get_board_data(250)
        if data.size == 0:
            continue
        eeg_channels = BoardShim.get_eeg_channels(board_id)
        channel_powers = []
        for ch in eeg_channels:
            signal = data[ch]
            DataFilter.perform_bandpass(signal, sampling_rate, 0.1, 30, 4, FilterTypes.BUTTERWORTH, 0)  # P300 band
            frequencies, power_spectral_density = welch(signal, fs=sampling_rate, nperseg=250) #nperseg adjusted.
            low_freq_index = np.argmin(np.abs(frequencies - 0.1))
            high_freq_index = np.argmin(np.abs(frequencies - 30))
            band_power = np.trapz(power_spectral_density[low_freq_index:high_freq_index], frequencies[low_freq_index:high_freq_index])
            channel_powers.append(band_power)
            print(f"Ch {ch}: Power (0.1-30 Hz) = {band_power:.2f} µV²")
        all_channel_powers.append(channel_powers)

except KeyboardInterrupt:
    board.stop_stream()
    board.release_session()
except Exception as e:
    print(f"An error occurred: {e}")
    board.stop_stream()
    board.release_session()

# Data Visualization
if all_channel_powers:
    all_channel_powers = np.array(all_channel_powers)
    num_channels = all_channel_powers.shape[1]
    time_points = np.arange(0, num_seconds)

    plt.figure(figsize=(12, 6))
    for ch in range(num_channels):
        plt.plot(time_points, all_channel_powers[:, ch], label=f"Ch {ch + 1}")

    plt.xlabel("Time (seconds)")
    plt.ylabel("Band Power (0.1-30 Hz) µV²")
    plt.title("Band Power over Time for Each Channel")
    plt.legend()
    plt.grid(True)
    plt.show()