# -*- coding: utf-8 -*-
"""P300_speller_classifier.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q2gJRHMGugOYbdmZk1UyNWt24pvX1NSn
"""

!pip install mne

import mne
import numpy as np
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load GDF (BCI Comp III IIb)
raw = mne.io.read_raw_gdf('/content/BCI3_train.gdf', preload=True)
events, event_dict = mne.events_from_annotations(raw)
raw.filter(0.1, 30, fir_design='firwin', picks='eeg')  # P300 band

# Epoching (BCI)
event_ids = {'target': 1, 'non-target': 0}  # Simplified—adjust per dataset labels
epochs = mne.Epochs(raw, events, event_id=[event_dict['768']],  # Stimulus onset
                    tmin=0, tmax=0.7, baseline=None, preload=True)  # 0-700ms post-stimulus
X = epochs.get_data(picks=['Cz', 'Pz'])  # Focus P300 channels—(trials, 2, 175)
y = np.array([1 if 'Target' in epochs.events[i, -1] else 0 for i in range(len(epochs))])  # Adjust labels

print(f"X shape: {X.shape}, y shape: {y.shape}")
print(f"Label counts: {np.unique(y, return_counts=True)}")

# ERP Features (Signal Processing)
features = X.mean(axis=2)  # Average over time—(trials, 2)

# LDA (ML)
X_train, X_test, y_train, y_test = train_test_split(features, y, test_size=0.3, random_state=42)
clf = LinearDiscriminantAnalysis()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(f"Test accuracy: {accuracy_score(y_test, y_pred):.2f}")