# -*- coding: utf-8 -*-
"""day7_2class_motor_csp_svm.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ef29_y_-tSFSpLntIjx_xLuILxeixDgG
"""

!pip install mne

import mne
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from mne.decoding import CSP

raw = mne.io.read_raw_gdf('/content/A01T.gdf', preload=True)
events, event_dict = mne.events_from_annotations(raw)

raw.notch_filter(50, picks='eeg')
raw.filter(8, 30, fir_design='firwin', picks='eeg')

sfreq = 250
tmin, tmax = 2, 5
n_samples = int((tmax - tmin) * sfreq)
event_ids = {'769': 0, '770': 1}

X, y = [], []
for event in events:
    event_id = event[2]
    if event_id in [event_dict[str(k)] for k in event_ids]:
        start = event[0] - int(4 * sfreq)
        stop = start + n_samples
        if start >= 0 and stop <= raw.n_times:
            data, _ = raw[:, start:stop]
            X.append(data)
            y.append(event_ids[str([k for k, v in event_dict.items() if v == event_id][0])])

X = np.array(X)
y = np.array(y)
print(f"X shape: {X.shape}, y shape: {y.shape}")
print(f"Label counts: {np.unique(y, return_counts=True)}")

csp = CSP(n_components=6, reg=0.1, log=True)
features = csp.fit_transform(X, y)
X_train, X_test, y_train, y_test = train_test_split(features, y, test_size=0.3, random_state=42)
clf = SVC(kernel='rbf', C=10, gamma='scale', random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print(f"Test accuracy: {accuracy_score(y_test, y_pred):.2f}")