{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOkU7ijbECFU5FvZPR27ywI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0CeIxbgbuBdX","executionInfo":{"status":"ok","timestamp":1741372342595,"user_tz":-300,"elapsed":19391,"user":{"displayName":"Burhanuddin Mustafa","userId":"06265806691346669695"}},"outputId":"ef1c29bd-31bd-4e0b-d430-3676dd66b35b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting mne\n","  Downloading mne-1.9.0-py3-none-any.whl.metadata (20 kB)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from mne) (4.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from mne) (3.1.5)\n","Requirement already satisfied: lazy-loader>=0.3 in /usr/local/lib/python3.11/dist-packages (from mne) (0.4)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from mne) (3.10.0)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from mne) (1.26.4)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from mne) (24.2)\n","Requirement already satisfied: pooch>=1.5 in /usr/local/lib/python3.11/dist-packages (from mne) (1.8.2)\n","Requirement already satisfied: scipy>=1.9 in /usr/local/lib/python3.11/dist-packages (from mne) (1.13.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from mne) (4.67.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (4.56.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (3.2.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->mne) (2.8.2)\n","Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.5->mne) (4.3.6)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.5->mne) (2.32.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->mne) (3.0.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->mne) (1.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (2025.1.31)\n","Downloading mne-1.9.0-py3-none-any.whl (7.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.4/7.4 MB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: mne\n","Successfully installed mne-1.9.0\n"]}],"source":["!pip install mne"]},{"cell_type":"code","source":["import mne\n","import numpy as np\n","from sklearn.svm import SVC\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from mne.decoding import CSP\n","\n","raw = mne.io.read_raw_gdf('/content/A01T.gdf', preload=True)\n","events, event_dict = mne.events_from_annotations(raw)\n","\n","raw.notch_filter(50, picks='eeg')\n","raw.filter(8, 30, fir_design='firwin', picks='eeg')\n","\n","sfreq = 250\n","tmin, tmax = 2, 5\n","n_samples = int((tmax - tmin) * sfreq)\n","event_ids = {'769': 0, '770': 1}\n","\n","X, y = [], []\n","for event in events:\n","    event_id = event[2]\n","    if event_id in [event_dict[str(k)] for k in event_ids]:\n","        start = event[0] - int(4 * sfreq)\n","        stop = start + n_samples\n","        if start >= 0 and stop <= raw.n_times:\n","            data, _ = raw[:, start:stop]\n","            X.append(data)\n","            y.append(event_ids[str([k for k, v in event_dict.items() if v == event_id][0])])\n","\n","X = np.array(X)\n","y = np.array(y)\n","print(f\"X shape: {X.shape}, y shape: {y.shape}\")\n","print(f\"Label counts: {np.unique(y, return_counts=True)}\")\n","\n","csp = CSP(n_components=6, reg=0.1, log=True)\n","features = csp.fit_transform(X, y)\n","X_train, X_test, y_train, y_test = train_test_split(features, y, test_size=0.3, random_state=42)\n","clf = SVC(kernel='rbf', C=10, gamma='scale', random_state=42)\n","clf.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)\n","print(f\"Test accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q3kTWq3Tzy8Y","executionInfo":{"status":"ok","timestamp":1741372917770,"user_tz":-300,"elapsed":7064,"user":{"displayName":"Burhanuddin Mustafa","userId":"06265806691346669695"}},"outputId":"bd006512-f53c-4502-f824-f92d97aa9b9f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Extracting EDF parameters from /content/A01T.gdf...\n","GDF file detected\n","Setting channel info structure...\n","Could not determine channel type of the following channels, they will be set as EEG:\n","EEG-Fz, EEG, EEG, EEG, EEG, EEG, EEG, EEG-C3, EEG, EEG-Cz, EEG, EEG-C4, EEG, EEG, EEG, EEG, EEG, EEG, EEG, EEG-Pz, EEG, EEG, EOG-left, EOG-central, EOG-right\n","Creating raw.info structure...\n","Reading 0 ... 672527  =      0.000 ...  2690.108 secs...\n"]},{"output_type":"stream","name":"stderr","text":["/usr/lib/python3.11/contextlib.py:144: RuntimeWarning: Channel names are not unique, found duplicates for: {'EEG'}. Applying running numbers for duplicates.\n","  next(self.gen)\n"]},{"output_type":"stream","name":"stdout","text":["Used Annotations descriptions: ['1023', '1072', '276', '277', '32766', '768', '769', '770', '771', '772']\n","Filtering raw data in 1 contiguous segment\n","Setting up band-stop filter from 49 - 51 Hz\n","\n","FIR filter parameters\n","---------------------\n","Designing a one-pass, zero-phase, non-causal bandstop filter:\n","- Windowed time-domain design (firwin) method\n","- Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation\n","- Lower passband edge: 49.38\n","- Lower transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 49.12 Hz)\n","- Upper passband edge: 50.62 Hz\n","- Upper transition bandwidth: 0.50 Hz (-6 dB cutoff frequency: 50.88 Hz)\n","- Filter length: 1651 samples (6.604 s)\n","\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=1)]: Done  17 tasks      | elapsed:    0.8s\n"]},{"output_type":"stream","name":"stdout","text":["Filtering raw data in 1 contiguous segment\n","Setting up band-pass filter from 8 - 30 Hz\n","\n","FIR filter parameters\n","---------------------\n","Designing a one-pass, zero-phase, non-causal bandpass filter:\n","- Windowed time-domain design (firwin) method\n","- Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation\n","- Lower passband edge: 8.00\n","- Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 7.00 Hz)\n","- Upper passband edge: 30.00 Hz\n","- Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)\n","- Filter length: 413 samples (1.652 s)\n","\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=1)]: Done  17 tasks      | elapsed:    0.9s\n"]},{"output_type":"stream","name":"stdout","text":["X shape: (144, 25, 750), y shape: (144,)\n","Label counts: (array([0, 1]), array([72, 72]))\n","Computing rank from data with rank=None\n","    Using tolerance 0.00052 (2.2e-16 eps * 25 dim * 9.4e+10  max singular value)\n","    Estimated rank (data): 25\n","    data: rank 25 computed from 25 data channels with 0 projectors\n","Reducing data rank from 25 -> 25\n","Estimating class=0 covariance using SHRINKAGE\n","Done.\n","Estimating class=1 covariance using SHRINKAGE\n","Done.\n","Test accuracy: 0.55\n"]}]}]}