# -*- coding: utf-8 -*-
"""day4_eeg_classifier.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_KeOe8zGiq9jBSD2fluAHRlbN4xE9zIp
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

# Parameters
fs = 1000
t = np.arange(0, 1, 1/fs)  # 1 sec trials
n_trials = 20  # 10 rest, 10 focus

# Simulate EEG trials
def generate_trial(state):
    theta = 0.4 * np.sin(2 * np.pi * 5 * t)
    alpha = (0.8 if state == "rest" else 0.3) * np.sin(2 * np.pi * 10 * t)
    beta = (0.2 if state == "rest" else 0.6) * np.sin(2 * np.pi * 20 * t)
    noise = 0.2 * np.random.normal(0, 1, len(t))
    return theta + alpha + beta + noise

# Generate data
trials = np.array([generate_trial("rest") for _ in range(n_trials//2)] +
                  [generate_trial("focus") for _ in range(n_trials//2)])
labels = np.array([0] * (n_trials//2) + [1] * (n_trials//2))  # 0=rest, 1=focus

# Extract features
features = []
for trial in trials:
    b_alpha, a_alpha = signal.butter(2, [8/(fs/2), 13/(fs/2)], btype='band')
    b_beta, a_beta = signal.butter(2, [13/(fs/2), 30/(fs/2)], btype='band')
    alpha_signal = signal.filtfilt(b_alpha, a_alpha, trial)
    beta_signal = signal.filtfilt(b_beta, a_beta, trial)
    alpha_power = np.mean(alpha_signal**2)
    beta_power = np.mean(beta_signal**2)
    features.append([alpha_power, beta_power])
features = np.array(features)

# Train SVM
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)
clf = SVC(kernel='rbf', random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Rest", "Focus"])
disp.plot()
plt.title("Confusion Matrix")
plt.show()

# Plot feature scatter
plt.scatter(features[labels==0, 0], features[labels==0, 1], label="Rest", alpha=0.5)
plt.scatter(features[labels==1, 0], features[labels==1, 1], label="Focus", alpha=0.5)
plt.xlabel("Alpha Power (µV²)")
plt.ylabel("Beta Power (µV²)")
plt.title("Feature Space")
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

fs = 1000
t = np.arange(0, 1, 1/fs)
n_trials = 100

def generate_trial(state):
  theta = 0.4 * np.sin(2 * np.pi * 5 * t)
  alpha = (0.8 if state == 'rest' else 0.3) * np.sin(2 * np.pi * 10 * t)
  beta = (0.2 if state == 'rest' else 0.6) * np.sin(2 * np.pi * 20 * t)
  noise = 0.2 * np.random.normal(0, 1, len(t))
  return theta + alpha + beta + noise

trials = np.array([generate_trial('rest') for _ in range (n_trials//2)] + [generate_trial('focus') for _ in range (n_trials//2)] + [generate_trial('move') for _ in range (n_trials//2)])
labels = np.array([0] * (n_trials//2) + [1] * (n_trials//2) + [2] * (n_trials//2))

features = []
for trial in trials:
  b_alpha, a_alpha = signal.butter(2, [8/(fs/2), 13/(fs/2)], btype='band')
  b_beta, a_beta = signal.butter(2, [13/(fs/2), 30/(fs/2)], btype='band')
  alpha_signal = signal.filtfilt(b_alpha, a_alpha, trial)
  beta_signal = signal.filtfilt(b_beta, a_beta, trial)
  alpha_power = np.mean(alpha_signal ** 2)
  beta_power = np.mean(beta_signal ** 2)
  features.append([alpha_power, beta_power])
features = np.array(features)

# SVM for BCI state classification

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)
clf = SVC(kernel='rbf', random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Rest", "Focus", "Move"])
disp.plot()
plt.title("Confusion Matrix")
plt.show()

plt.scatter(features[labels==0, 0], features[labels==0, 1], label="Rest", alpha=0.5)
plt.scatter(features[labels==1, 0], features[labels==1, 1], label="Focus", alpha=0.5)
plt.scatter(features[labels==2, 0], features[labels==2, 1], label="Move", alpha=0.5)
plt.xlabel("Alpha Power (µV²)")
plt.ylabel("Beta Power (µV²)")
plt.title("Feature Space")
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay

fs = 1000
t = np.arange(0, 1, 1/fs)
n_trials = 100

def generate_trial(state):
  theta = 0.4 * np.sin(2 * np.pi * 5 * t)
  alpha = (0.8 if state == 'rest' else 0.3) * np.sin(2 * np.pi * 10 * t)
  beta = (0.2 if state == 'rest' else 0.6) * np.sin(2 * np.pi * 20 * t)
  noise = 0.2 * np.random.normal(0, 1, len(t))
  return theta + alpha + beta + noise

trials = np.array([generate_trial('rest') for _ in range (n_trials//2)] + [generate_trial('focus') for _ in range (n_trials//2)] + [generate_trial('move') for _ in range (n_trials//2)])
labels = np.array([0] * (n_trials//2) + [1] * (n_trials//2) + [2] * (n_trials//2))

features = []
for trial in trials:
  b_alpha, a_alpha = signal.butter(2, [8/(fs/2), 13/(fs/2)], btype='band')
  b_beta, a_beta = signal.butter(2, [13/(fs/2), 30/(fs/2)], btype='band')
  alpha_signal = signal.filtfilt(b_alpha, a_alpha, trial)
  beta_signal = signal.filtfilt(b_beta, a_beta, trial)
  alpha_power = np.mean(alpha_signal ** 2)
  beta_power = np.mean(beta_signal ** 2)
  features.append([alpha_power, beta_power])
features = np.array(features)

# SVM for BCI state classification

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)
clf_lr = LogisticRegression(random_state=42)
clf_lr.fit(X_train, y_train)
y_pred = clf_lr.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Rest", "Focus", "Move"])
disp.plot()
plt.title("Confusion Matrix")
plt.show()

plt.scatter(features[labels==0, 0], features[labels==0, 1], label="Rest", alpha=0.5)
plt.scatter(features[labels==1, 0], features[labels==1, 1], label="Focus", alpha=0.5)
plt.scatter(features[labels==2, 0], features[labels==2, 1], label="Move", alpha=0.5)
plt.xlabel("Alpha Power (µV²)")
plt.ylabel("Beta Power (µV²)")
plt.title("Feature Space")
plt.legend()
plt.show()