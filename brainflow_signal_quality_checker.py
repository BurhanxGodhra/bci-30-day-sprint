{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMGYyhOjceUZmMwtGxCSlMZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install --upgrade brainflow\n","!pip install PyWavelets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8kgakb6n7hkM","executionInfo":{"status":"ok","timestamp":1741460034051,"user_tz":-300,"elapsed":8367,"user":{"displayName":"Burhanuddin Mustafa","userId":"06265806691346669695"}},"outputId":"e3ac9aea-ef0b-45b3-a53c-13cda13fb7bf"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: brainflow in /usr/local/lib/python3.11/dist-packages (5.16.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from brainflow) (1.26.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from brainflow) (75.1.0)\n","Collecting PyWavelets\n","  Downloading pywavelets-1.8.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (9.0 kB)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from PyWavelets) (1.26.4)\n","Downloading pywavelets-1.8.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.5/4.5 MB\u001b[0m \u001b[31m23.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: PyWavelets\n","Successfully installed PyWavelets-1.8.0\n"]}]},{"cell_type":"markdown","source":["## **Simple Signal Quality Checker**\n","**Description**\n","\n","This is a minimal working example of a signal quality checker designed for quick testing and debugging. It focuses on simplicity, avoiding advanced preprocessing steps like detrending or artifact removal. The script includes:\n","\n","**Scaling** : Standardizes and scales the\n","signal to a realistic EEG range (-100 µV to +100 µV).\n","\n","**Noise Addition** : Adds small Gaussian noise to simulate variability.\n","\n","**Signal Quality Metric** : Uses variance as a simple proxy for signal quality.\n","\n","**Key Features**\n","\n","Easy to implement and debug.\n","\n","Minimal dependencies on external libraries.\n","\n","Suitable for beginners or users who need a quick signal quality check.\n","\n","**Use Case**\n","\n","Ideal for initial testing or educational purposes.\n","\n","Works well with synthetic data but may not generalize to real-world EEG signals."],"metadata":{"id":"VQlyVLVlIwBD"}},{"cell_type":"code","source":["import numpy as np\n","from brainflow.board_shim import BoardShim, BrainFlowInputParams\n","import time\n","\n","# Release any existing board sessions\n","try:\n","    BoardShim.release_all_sessions()\n","except Exception as e:\n","    print(f\"Error during cleanup: {e}\")\n","\n","# Setup board\n","board_id = -1  # Synthetic board\n","params = BrainFlowInputParams()\n","\n","try:\n","    board = BoardShim(board_id, params)\n","    board.prepare_session()\n","    board.start_stream()\n","\n","    # Wait for data to accumulate (simulate real-time delay)\n","    time.sleep(5)  # Wait longer for data to accumulate\n","\n","    # Retrieve data\n","    data = board.get_board_data(250 * 5)  # 5 seconds of data (250 Hz sampling rate)\n","\n","    # Check if data is valid\n","    if data.size == 0:\n","        raise ValueError(\"No data received from the board. Check the connection or buffer size.\")\n","\n","    # Get EEG channels and sampling rate\n","    eeg_channels = BoardShim.get_eeg_channels(board_id)\n","    sampling_rate = BoardShim.get_sampling_rate(board_id)\n","\n","    # Debugging: Print data shape and content\n","    print(f\"Data shape: {data.shape}\")\n","    print(f\"EEG channels: {eeg_channels}\")\n","    print(f\"Sampling rate: {sampling_rate}\")\n","\n","    # Process each EEG channel\n","    for ch in eeg_channels:\n","        signal = data[ch]  # Extract the signal for the current channel\n","\n","        # Scale the signal to a realistic EEG range (-100 µV to +100 µV)\n","        signal = (signal - np.mean(signal)) / np.std(signal)  # Standardize\n","        signal *= 100  # Scale to ±100 µV\n","\n","        # Add small Gaussian noise to simulate variability\n","        signal += np.random.normal(0, 1e-3, len(signal))\n","\n","        # Calculate signal quality (using variance as a proxy)\n","        signal_variance = np.var(signal)\n","        print(f\"Channel {ch}: Variance = {signal_variance:.2f}\")\n","\n","        # Check signal quality (arbitrary threshold)\n","        if signal_variance < 1.0:  # Arbitrary threshold\n","            print(f\"Warning: Channel {ch} has low signal quality!\")\n","\n","    # Cleanup\n","    board.stop_stream()\n","    board.release_session()\n","\n","except Exception as e:\n","    print(f\"Error: {e}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VAs9b6Yexn4P","executionInfo":{"status":"ok","timestamp":1741454482981,"user_tz":-300,"elapsed":5116,"user":{"displayName":"Burhanuddin Mustafa","userId":"06265806691346669695"}},"outputId":"fa2e78c3-2fa9-463e-aca4-60e13dcccfbf"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Data shape: (32, 1250)\n","EEG channels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n","Sampling rate: 250\n","Channel 1: Variance = 10000.00\n","Channel 2: Variance = 10000.00\n","Channel 3: Variance = 9999.99\n","Channel 4: Variance = 10000.01\n","Channel 5: Variance = 10000.00\n","Channel 6: Variance = 10000.00\n","Channel 7: Variance = 10000.00\n","Channel 8: Variance = 10000.00\n","Channel 9: Variance = 10000.00\n","Channel 10: Variance = 9999.99\n","Channel 11: Variance = 10000.00\n","Channel 12: Variance = 9999.99\n","Channel 13: Variance = 10000.00\n","Channel 14: Variance = 10000.00\n","Channel 15: Variance = 9999.99\n","Channel 16: Variance = 10000.01\n"]}]},{"cell_type":"markdown","source":["# **Enhanced Signal Quality Checker with Advanced Preprocessing**\n","\n","**Description**\n","\n","This is an enhanced version of the signal quality checker that incorporates advanced preprocessing techniques commonly used in EEG analysis pipelines. It includes:\n","\n","**Filtering** :\n","\n","Bandpass filter (0.5–50 Hz) to focus on the EEG frequency range.\n","\n","Notch filter (e.g., 50 Hz) to remove powerline interference.\n","\n","**Wavelet Denoising** : Removes noise while preserving signal details.\n","\n","**Independent Component Analysis (ICA) **: Separates artifacts (e.g., eye blinks, muscle activity) from the EEG signal.\n","\n","**Median Filtering** : Smooths out spikes and abrupt changes.\n","\n","**Signal Quality Metric**s :\n","SNR (Signal-to-Noise Ratio): Provides a meaningful measure of signal quality.\n","\n","**Artifact Detection**: Flags extreme amplitude values and sudden jumps.\n","\n","**Key Features**\n","\n","Detailed insights into signal quality using SNR and artifact detection.\n","\n","Mimics real-world EEG preprocessing pipelines, making it more applicable to actual EEG data.\n","\n","Includes visualization tools to inspect raw and filtered signals.\n","\n","**Use Case**\n","\n","Suitable for research or clinical applications requiring detailed signal quality metrics.\n","\n","Can be integrated into advanced EEG analysis pipelines."],"metadata":{"id":"r2ywZaDlJfsD"}},{"cell_type":"code","source":["import numpy as np\n","from brainflow.board_shim import BoardShim, BrainFlowInputParams\n","from scipy.signal import butter, filtfilt, medfilt\n","from sklearn.decomposition import FastICA\n","import pywt  # For wavelet denoising\n","import matplotlib.pyplot as plt\n","import time\n","\n","# Release any existing board sessions\n","try:\n","    BoardShim.release_all_sessions()\n","except Exception as e:\n","    print(f\"Error during cleanup: {e}\")\n","\n","# Setup board\n","board_id = -1  # Synthetic board\n","params = BrainFlowInputParams()\n","\n","try:\n","    board = BoardShim(board_id, params)\n","    board.prepare_session()\n","    board.start_stream()\n","\n","    # Wait for data to accumulate (simulate real-time delay)\n","    time.sleep(5)  # Wait longer for data to accumulate\n","\n","    # Retrieve data\n","    data = board.get_board_data(250 * 5)  # 5 seconds of data (250 Hz sampling rate)\n","\n","    # Check if data is valid\n","    if data.size == 0:\n","        raise ValueError(\"No data received from the board. Check the connection or buffer size.\")\n","\n","    # Get EEG channels and sampling rate\n","    eeg_channels = BoardShim.get_eeg_channels(board_id)\n","    sampling_rate = BoardShim.get_sampling_rate(board_id)\n","\n","    # Debugging: Print data shape and content\n","    print(f\"Data shape: {data.shape}\")\n","    print(f\"EEG channels: {eeg_channels}\")\n","    print(f\"Sampling rate: {sampling_rate}\")\n","\n","    # Define a Butterworth bandpass filter using SciPy\n","    def butter_bandpass_filter(signal, lowcut, highcut, fs, order=4):\n","        nyquist = 0.5 * fs  # Nyquist frequency\n","        low = lowcut / nyquist  # Normalize low cutoff frequency\n","        high = highcut / nyquist  # Normalize high cutoff frequency\n","        b, a = butter(order, [low, high], btype='band')  # Design the filter\n","        filtered_signal = filtfilt(b, a, signal)  # Apply the filter\n","        return filtered_signal\n","\n","    # Define a notch filter using SciPy\n","    def notch_filter(signal, notch_freq, fs, quality_factor=30):\n","        nyquist = 0.5 * fs  # Nyquist frequency\n","        freq = notch_freq / nyquist  # Normalize notch frequency\n","        b, a = butter(2, [freq - freq / quality_factor, freq + freq / quality_factor], btype='bandstop')\n","        filtered_signal = filtfilt(b, a, signal)  # Apply the filter\n","        return filtered_signal\n","\n","    # Define wavelet denoising\n","    def wavelet_denoising(signal, wavelet='db4', level=1):\n","        coeffs = pywt.wavedec(signal, wavelet, level=level)\n","        threshold = np.median(np.abs(coeffs[-1])) / 0.6745 * np.sqrt(2 * np.log(len(signal)))\n","        coeffs[1:] = [pywt.threshold(c, threshold, mode='soft') for c in coeffs[1:]]\n","        denoised_signal = pywt.waverec(coeffs, wavelet)\n","        return denoised_signal\n","\n","    # Process each EEG channel\n","    for ch in eeg_channels:\n","        signal = data[ch]  # Extract the signal for the current channel\n","\n","        # Scale the signal to a realistic EEG range (-100 µV to +100 µV)\n","        signal = (signal - np.mean(signal)) / np.std(signal)  # Standardize\n","        signal *= 100  # Scale to ±100 µV\n","\n","        # Add small Gaussian noise to simulate variability\n","        signal += np.random.normal(0, 1e-3, len(signal))\n","\n","        # Apply a Butterworth bandpass filter (0.5–50 Hz)\n","        try:\n","            signal = butter_bandpass_filter(signal, lowcut=0.5, highcut=50, fs=sampling_rate, order=4)\n","        except Exception as e:\n","            print(f\"Error applying bandpass filter to Channel {ch}: {e}\")\n","            continue\n","\n","        # Apply a notch filter (e.g., 50 Hz for powerline interference)\n","        try:\n","            signal = notch_filter(signal, notch_freq=50, fs=sampling_rate)\n","        except Exception as e:\n","            print(f\"Error applying notch filter to Channel {ch}: {e}\")\n","            continue\n","\n","        # Apply median filtering to smooth out spikes\n","        try:\n","            signal = medfilt(signal, kernel_size=3)  # Use a small kernel size for smoothing\n","        except Exception as e:\n","            print(f\"Error applying median filter to Channel {ch}: {e}\")\n","            continue\n","\n","        # Apply wavelet denoising\n","        try:\n","            signal = wavelet_denoising(signal, wavelet='db4', level=1)\n","        except Exception as e:\n","            print(f\"Error applying wavelet denoising to Channel {ch}: {e}\")\n","            continue\n","\n","        # Visualize raw vs filtered signals\n","        plt.figure(figsize=(10, 6))\n","        plt.plot(data[ch], label=\"Raw Signal\", alpha=0.7)\n","        plt.plot(signal, label=\"Filtered Signal\", alpha=0.7)\n","        plt.title(f\"Channel {ch}: Raw vs Filtered Signal\")\n","        plt.legend()\n","        plt.show()\n","\n","        # Apply Independent Component Analysis (ICA) for artifact removal\n","        try:\n","            # Reshape the signal for ICA (requires 2D input)\n","            signal_reshaped = signal.reshape(-1, 1)\n","            ica = FastICA(n_components=1, random_state=42)\n","            ica.fit(signal_reshaped)\n","            cleaned_signal = ica.transform(signal_reshaped).flatten()\n","            signal = cleaned_signal  # Replace the signal with the cleaned version\n","        except Exception as e:\n","            print(f\"Error applying ICA to Channel {ch}: {e}\")\n","            continue\n","\n","        # Calculate SNR (simple approximation)\n","        signal_variance = np.var(signal)\n","        noise_variance = np.var(np.diff(signal))  # Approximate noise using differences between samples\n","        if noise_variance == 0:\n","            snr = float('inf')  # Avoid division by zero\n","        else:\n","            snr = 10 * np.log10(signal_variance / noise_variance)\n","        print(f\"Channel {ch}: SNR = {snr:.2f} dB\")\n","\n","        # Artifact detection (check for extreme values or sudden jumps)\n","        max_amplitude = np.max(np.abs(signal))\n","        sudden_jumps = np.any(np.abs(np.diff(signal)) > 100)  # Further relaxed threshold for sudden jumps (±100 µV)\n","        if max_amplitude > 300:  # Further relaxed threshold for extreme amplitude (±300 µV)\n","            print(f\"Warning: Channel {ch} has extreme amplitude values (potential artifact).\")\n","        if sudden_jumps:\n","            print(f\"Warning: Channel {ch} has sudden jumps (potential artifact).\")\n","\n","        # Check signal quality (based on SNR)\n","        if snr < 10:  # Arbitrary threshold\n","            print(f\"Warning: Channel {ch} has low signal quality!\")\n","\n","    # Cleanup\n","    board.stop_stream()\n","    board.release_session()\n","\n","except Exception as e:\n","    print(f\"Error: {e}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1XSCKRXoSChRWpi0t4e0b5zszAqizPMRH"},"id":"p2Kom7qXGmYG","executionInfo":{"status":"ok","timestamp":1741460064632,"user_tz":-300,"elapsed":10656,"user":{"displayName":"Burhanuddin Mustafa","userId":"06265806691346669695"}},"outputId":"a6ddf674-d7c7-468c-baf3-f47a382d7732"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}